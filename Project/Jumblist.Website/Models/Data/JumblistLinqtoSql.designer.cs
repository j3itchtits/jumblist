#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Jumblist.Website.Models.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="JumblistDatabase")]
	public partial class JumblistLinqtoSqlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAuthor(Author instance);
    partial void UpdateAuthor(Author instance);
    partial void DeleteAuthor(Author instance);
    partial void InsertFeed(Feed instance);
    partial void UpdateFeed(Feed instance);
    partial void DeleteFeed(Feed instance);
    partial void InsertKeyword(Keyword instance);
    partial void UpdateKeyword(Keyword instance);
    partial void DeleteKeyword(Keyword instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertLocationType(LocationType instance);
    partial void UpdateLocationType(LocationType instance);
    partial void DeleteLocationType(LocationType instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertMessageType(MessageType instance);
    partial void UpdateMessageType(MessageType instance);
    partial void DeleteMessageType(MessageType instance);
    #endregion
		
		public JumblistLinqtoSqlDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["JumblistDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public JumblistLinqtoSqlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JumblistLinqtoSqlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JumblistLinqtoSqlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JumblistLinqtoSqlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Author> Authors
		{
			get
			{
				return this.GetTable<Author>();
			}
		}
		
		public System.Data.Linq.Table<Feed> Feeds
		{
			get
			{
				return this.GetTable<Feed>();
			}
		}
		
		public System.Data.Linq.Table<Keyword> Keywords
		{
			get
			{
				return this.GetTable<Keyword>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<LocationType> LocationTypes
		{
			get
			{
				return this.GetTable<LocationType>();
			}
		}
		
		public System.Data.Linq.Table<MessageKeyword> MessageKeywords
		{
			get
			{
				return this.GetTable<MessageKeyword>();
			}
		}
		
		public System.Data.Linq.Table<MessageLocation> MessageLocations
		{
			get
			{
				return this.GetTable<MessageLocation>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<MessageType> MessageTypes
		{
			get
			{
				return this.GetTable<MessageType>();
			}
		}
		
		[Function(Name="dbo.DistanceBetween", IsComposable=true)]
		public System.Nullable<float> DistanceBetween([Parameter(Name="Lat1", DbType="Real")] System.Nullable<float> lat1, [Parameter(Name="Long1", DbType="Real")] System.Nullable<float> long1, [Parameter(Name="Lat2", DbType="Real")] System.Nullable<float> lat2, [Parameter(Name="Long2", DbType="Real")] System.Nullable<float> long2)
		{
			return ((System.Nullable<float>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lat1, long1, lat2, long2).ReturnValue));
		}
		
		[Function(Name="dbo.NearestMessages", IsComposable=true)]
		public IQueryable<NearestMessagesResult> NearestMessages([Parameter(DbType="Real")] System.Nullable<float> lat, [Parameter(Name="long", DbType="Real")] System.Nullable<float> @long, [Parameter(DbType="Int")] System.Nullable<int> distance)
		{
			return this.CreateMethodCallQuery<NearestMessagesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lat, @long, distance);
		}
	}
	
	[Table(Name="dbo.Authors")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorId;
		
		private string _AuthorName;
		
		private string _AuthorProfile;
		
		private string _AuthorEmailHttpLink;
		
		private EntitySet<Message> _Messages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorIdChanging(int value);
    partial void OnAuthorIdChanged();
    partial void OnAuthorNameChanging(string value);
    partial void OnAuthorNameChanged();
    partial void OnAuthorProfileChanging(string value);
    partial void OnAuthorProfileChanged();
    partial void OnAuthorEmailHttpLinkChanging(string value);
    partial void OnAuthorEmailHttpLinkChanged();
    #endregion
		
		public Author()
		{
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			OnCreated();
		}
		
		[Column(Storage="_AuthorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string AuthorName
		{
			get
			{
				return this._AuthorName;
			}
			set
			{
				if ((this._AuthorName != value))
				{
					this.OnAuthorNameChanging(value);
					this.SendPropertyChanging();
					this._AuthorName = value;
					this.SendPropertyChanged("AuthorName");
					this.OnAuthorNameChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorProfile", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string AuthorProfile
		{
			get
			{
				return this._AuthorProfile;
			}
			set
			{
				if ((this._AuthorProfile != value))
				{
					this.OnAuthorProfileChanging(value);
					this.SendPropertyChanging();
					this._AuthorProfile = value;
					this.SendPropertyChanged("AuthorProfile");
					this.OnAuthorProfileChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorEmailHttpLink", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string AuthorEmailHttpLink
		{
			get
			{
				return this._AuthorEmailHttpLink;
			}
			set
			{
				if ((this._AuthorEmailHttpLink != value))
				{
					this.OnAuthorEmailHttpLinkChanging(value);
					this.SendPropertyChanging();
					this._AuthorEmailHttpLink = value;
					this.SendPropertyChanged("AuthorEmailHttpLink");
					this.OnAuthorEmailHttpLinkChanged();
				}
			}
		}
		
		[Association(Name="Author_Message", Storage="_Messages", ThisKey="AuthorId", OtherKey="AuthorId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[Table(Name="dbo.Feeds")]
	public partial class Feed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FeedId;
		
		private string _FeedUrl;
		
		private string _FeedUsername;
		
		private string _FeedPassword;
		
		private double _FeedCheckIntervalTicks;
		
		private string _FeedType;
		
		private string _FeedLastUpdateHttpStatus;
		
		private System.Nullable<System.DateTime> _FeedLastUpdateDateTime;
		
		private EntitySet<Message> _Messages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedIdChanging(int value);
    partial void OnFeedIdChanged();
    partial void OnFeedUrlChanging(string value);
    partial void OnFeedUrlChanged();
    partial void OnFeedUsernameChanging(string value);
    partial void OnFeedUsernameChanged();
    partial void OnFeedPasswordChanging(string value);
    partial void OnFeedPasswordChanged();
    partial void OnFeedCheckIntervalTicksChanging(double value);
    partial void OnFeedCheckIntervalTicksChanged();
    partial void OnFeedTypeChanging(string value);
    partial void OnFeedTypeChanged();
    partial void OnFeedLastUpdateHttpStatusChanging(string value);
    partial void OnFeedLastUpdateHttpStatusChanged();
    partial void OnFeedLastUpdateDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFeedLastUpdateDateTimeChanged();
    #endregion
		
		public Feed()
		{
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			OnCreated();
		}
		
		[Column(Storage="_FeedId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FeedId
		{
			get
			{
				return this._FeedId;
			}
			set
			{
				if ((this._FeedId != value))
				{
					this.OnFeedIdChanging(value);
					this.SendPropertyChanging();
					this._FeedId = value;
					this.SendPropertyChanged("FeedId");
					this.OnFeedIdChanged();
				}
			}
		}
		
		[Column(Storage="_FeedUrl", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string FeedUrl
		{
			get
			{
				return this._FeedUrl;
			}
			set
			{
				if ((this._FeedUrl != value))
				{
					this.OnFeedUrlChanging(value);
					this.SendPropertyChanging();
					this._FeedUrl = value;
					this.SendPropertyChanged("FeedUrl");
					this.OnFeedUrlChanged();
				}
			}
		}
		
		[Column(Storage="_FeedUsername", DbType="NVarChar(250)")]
		public string FeedUsername
		{
			get
			{
				return this._FeedUsername;
			}
			set
			{
				if ((this._FeedUsername != value))
				{
					this.OnFeedUsernameChanging(value);
					this.SendPropertyChanging();
					this._FeedUsername = value;
					this.SendPropertyChanged("FeedUsername");
					this.OnFeedUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_FeedPassword", DbType="NVarChar(250)")]
		public string FeedPassword
		{
			get
			{
				return this._FeedPassword;
			}
			set
			{
				if ((this._FeedPassword != value))
				{
					this.OnFeedPasswordChanging(value);
					this.SendPropertyChanging();
					this._FeedPassword = value;
					this.SendPropertyChanged("FeedPassword");
					this.OnFeedPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_FeedCheckIntervalTicks", DbType="Float NOT NULL")]
		public double FeedCheckIntervalTicks
		{
			get
			{
				return this._FeedCheckIntervalTicks;
			}
			set
			{
				if ((this._FeedCheckIntervalTicks != value))
				{
					this.OnFeedCheckIntervalTicksChanging(value);
					this.SendPropertyChanging();
					this._FeedCheckIntervalTicks = value;
					this.SendPropertyChanged("FeedCheckIntervalTicks");
					this.OnFeedCheckIntervalTicksChanged();
				}
			}
		}
		
		[Column(Storage="_FeedType", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string FeedType
		{
			get
			{
				return this._FeedType;
			}
			set
			{
				if ((this._FeedType != value))
				{
					this.OnFeedTypeChanging(value);
					this.SendPropertyChanging();
					this._FeedType = value;
					this.SendPropertyChanged("FeedType");
					this.OnFeedTypeChanged();
				}
			}
		}
		
		[Column(Storage="_FeedLastUpdateHttpStatus", DbType="NVarChar(50)")]
		public string FeedLastUpdateHttpStatus
		{
			get
			{
				return this._FeedLastUpdateHttpStatus;
			}
			set
			{
				if ((this._FeedLastUpdateHttpStatus != value))
				{
					this.OnFeedLastUpdateHttpStatusChanging(value);
					this.SendPropertyChanging();
					this._FeedLastUpdateHttpStatus = value;
					this.SendPropertyChanged("FeedLastUpdateHttpStatus");
					this.OnFeedLastUpdateHttpStatusChanged();
				}
			}
		}
		
		[Column(Storage="_FeedLastUpdateDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FeedLastUpdateDateTime
		{
			get
			{
				return this._FeedLastUpdateDateTime;
			}
			set
			{
				if ((this._FeedLastUpdateDateTime != value))
				{
					this.OnFeedLastUpdateDateTimeChanging(value);
					this.SendPropertyChanging();
					this._FeedLastUpdateDateTime = value;
					this.SendPropertyChanged("FeedLastUpdateDateTime");
					this.OnFeedLastUpdateDateTimeChanged();
				}
			}
		}
		
		[Association(Name="Feed_Message", Storage="_Messages", ThisKey="FeedId", OtherKey="FeedId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Feed = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Feed = null;
		}
	}
	
	[Table(Name="dbo.Keywords")]
	public partial class Keyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KeywordId;
		
		private string _Keyword1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeywordIdChanging(int value);
    partial void OnKeywordIdChanged();
    partial void OnKeyword1Changing(string value);
    partial void OnKeyword1Changed();
    #endregion
		
		public Keyword()
		{
			OnCreated();
		}
		
		[Column(Storage="_KeywordId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KeywordId
		{
			get
			{
				return this._KeywordId;
			}
			set
			{
				if ((this._KeywordId != value))
				{
					this.OnKeywordIdChanging(value);
					this.SendPropertyChanging();
					this._KeywordId = value;
					this.SendPropertyChanged("KeywordId");
					this.OnKeywordIdChanged();
				}
			}
		}
		
		[Column(Name="Keyword", Storage="_Keyword1", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Keyword1
		{
			get
			{
				return this._Keyword1;
			}
			set
			{
				if ((this._Keyword1 != value))
				{
					this.OnKeyword1Changing(value);
					this.SendPropertyChanging();
					this._Keyword1 = value;
					this.SendPropertyChanged("Keyword1");
					this.OnKeyword1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Locations")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationId;
		
		private int _LocationParentId;
		
		private string _LocationName;
		
		private int _LocationTypeId;
		
		private EntityRef<LocationType> _LocationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnLocationParentIdChanging(int value);
    partial void OnLocationParentIdChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    partial void OnLocationTypeIdChanging(int value);
    partial void OnLocationTypeIdChanged();
    #endregion
		
		public Location()
		{
			this._LocationType = default(EntityRef<LocationType>);
			OnCreated();
		}
		
		[Column(Storage="_LocationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[Column(Storage="_LocationParentId", DbType="Int NOT NULL")]
		public int LocationParentId
		{
			get
			{
				return this._LocationParentId;
			}
			set
			{
				if ((this._LocationParentId != value))
				{
					this.OnLocationParentIdChanging(value);
					this.SendPropertyChanging();
					this._LocationParentId = value;
					this.SendPropertyChanged("LocationParentId");
					this.OnLocationParentIdChanged();
				}
			}
		}
		
		[Column(Storage="_LocationName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[Column(Storage="_LocationTypeId", DbType="Int NOT NULL")]
		public int LocationTypeId
		{
			get
			{
				return this._LocationTypeId;
			}
			set
			{
				if ((this._LocationTypeId != value))
				{
					if (this._LocationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._LocationTypeId = value;
					this.SendPropertyChanged("LocationTypeId");
					this.OnLocationTypeIdChanged();
				}
			}
		}
		
		[Association(Name="LocationType_Location", Storage="_LocationType", ThisKey="LocationTypeId", OtherKey="LocationTypeId", IsForeignKey=true)]
		public LocationType LocationType
		{
			get
			{
				return this._LocationType.Entity;
			}
			set
			{
				LocationType previousValue = this._LocationType.Entity;
				if (((previousValue != value) 
							|| (this._LocationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocationType.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._LocationType.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._LocationTypeId = value.LocationTypeId;
					}
					else
					{
						this._LocationTypeId = default(int);
					}
					this.SendPropertyChanged("LocationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LocationTypes")]
	public partial class LocationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationTypeId;
		
		private string _LocationTypeName;
		
		private EntitySet<Location> _Locations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationTypeIdChanging(int value);
    partial void OnLocationTypeIdChanged();
    partial void OnLocationTypeNameChanging(string value);
    partial void OnLocationTypeNameChanged();
    #endregion
		
		public LocationType()
		{
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			OnCreated();
		}
		
		[Column(Storage="_LocationTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationTypeId
		{
			get
			{
				return this._LocationTypeId;
			}
			set
			{
				if ((this._LocationTypeId != value))
				{
					this.OnLocationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._LocationTypeId = value;
					this.SendPropertyChanged("LocationTypeId");
					this.OnLocationTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_LocationTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LocationTypeName
		{
			get
			{
				return this._LocationTypeName;
			}
			set
			{
				if ((this._LocationTypeName != value))
				{
					this.OnLocationTypeNameChanging(value);
					this.SendPropertyChanging();
					this._LocationTypeName = value;
					this.SendPropertyChanged("LocationTypeName");
					this.OnLocationTypeNameChanged();
				}
			}
		}
		
		[Association(Name="LocationType_Location", Storage="_Locations", ThisKey="LocationTypeId", OtherKey="LocationTypeId")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.LocationType = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.LocationType = null;
		}
	}
	
	[Table(Name="dbo.MessageKeywords")]
	public partial class MessageKeyword
	{
		
		private int _MessageId;
		
		private int _KeywordId;
		
		public MessageKeyword()
		{
		}
		
		[Column(Storage="_MessageId", DbType="Int NOT NULL")]
		public int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					this._MessageId = value;
				}
			}
		}
		
		[Column(Storage="_KeywordId", DbType="Int NOT NULL")]
		public int KeywordId
		{
			get
			{
				return this._KeywordId;
			}
			set
			{
				if ((this._KeywordId != value))
				{
					this._KeywordId = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.MessageLocations")]
	public partial class MessageLocation
	{
		
		private int _MessageId;
		
		private int _LocationId;
		
		public MessageLocation()
		{
		}
		
		[Column(Storage="_MessageId", DbType="Int NOT NULL")]
		public int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					this._MessageId = value;
				}
			}
		}
		
		[Column(Storage="_LocationId", DbType="Int NOT NULL")]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this._LocationId = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageId;
		
		private int _MessageParentId;
		
		private string _MessageUrl;
		
		private string _MessageTitle;
		
		private string _MessageBody;
		
		private System.DateTime _MessageDateTime;
		
		private int _MessageTypeId;
		
		private System.Nullable<double> _MessageLatitude;
		
		private System.Nullable<double> _MessageLongitude;
		
		private System.Nullable<bool> _MessageDisplay;
		
		private int _AuthorId;
		
		private int _FeedId;
		
		private EntityRef<Message> _Message2;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<Feed> _Feed;
		
		private EntityRef<Message> _Message1;
		
		private EntityRef<MessageType> _MessageType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIdChanging(int value);
    partial void OnMessageIdChanged();
    partial void OnMessageParentIdChanging(int value);
    partial void OnMessageParentIdChanged();
    partial void OnMessageUrlChanging(string value);
    partial void OnMessageUrlChanged();
    partial void OnMessageTitleChanging(string value);
    partial void OnMessageTitleChanged();
    partial void OnMessageBodyChanging(string value);
    partial void OnMessageBodyChanged();
    partial void OnMessageDateTimeChanging(System.DateTime value);
    partial void OnMessageDateTimeChanged();
    partial void OnMessageTypeIdChanging(int value);
    partial void OnMessageTypeIdChanged();
    partial void OnMessageLatitudeChanging(System.Nullable<double> value);
    partial void OnMessageLatitudeChanged();
    partial void OnMessageLongitudeChanging(System.Nullable<double> value);
    partial void OnMessageLongitudeChanged();
    partial void OnMessageDisplayChanging(System.Nullable<bool> value);
    partial void OnMessageDisplayChanged();
    partial void OnAuthorIdChanging(int value);
    partial void OnAuthorIdChanged();
    partial void OnFeedIdChanging(int value);
    partial void OnFeedIdChanged();
    #endregion
		
		public Message()
		{
			this._Message2 = default(EntityRef<Message>);
			this._Author = default(EntityRef<Author>);
			this._Feed = default(EntityRef<Feed>);
			this._Message1 = default(EntityRef<Message>);
			this._MessageType = default(EntityRef<MessageType>);
			OnCreated();
		}
		
		[Column(Storage="_MessageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					if (this._Message1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[Column(Storage="_MessageParentId", DbType="Int NOT NULL")]
		public int MessageParentId
		{
			get
			{
				return this._MessageParentId;
			}
			set
			{
				if ((this._MessageParentId != value))
				{
					this.OnMessageParentIdChanging(value);
					this.SendPropertyChanging();
					this._MessageParentId = value;
					this.SendPropertyChanged("MessageParentId");
					this.OnMessageParentIdChanged();
				}
			}
		}
		
		[Column(Storage="_MessageUrl", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string MessageUrl
		{
			get
			{
				return this._MessageUrl;
			}
			set
			{
				if ((this._MessageUrl != value))
				{
					this.OnMessageUrlChanging(value);
					this.SendPropertyChanging();
					this._MessageUrl = value;
					this.SendPropertyChanged("MessageUrl");
					this.OnMessageUrlChanged();
				}
			}
		}
		
		[Column(Storage="_MessageTitle", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string MessageTitle
		{
			get
			{
				return this._MessageTitle;
			}
			set
			{
				if ((this._MessageTitle != value))
				{
					this.OnMessageTitleChanging(value);
					this.SendPropertyChanging();
					this._MessageTitle = value;
					this.SendPropertyChanged("MessageTitle");
					this.OnMessageTitleChanged();
				}
			}
		}
		
		[Column(Storage="_MessageBody", DbType="NVarChar(250)")]
		public string MessageBody
		{
			get
			{
				return this._MessageBody;
			}
			set
			{
				if ((this._MessageBody != value))
				{
					this.OnMessageBodyChanging(value);
					this.SendPropertyChanging();
					this._MessageBody = value;
					this.SendPropertyChanged("MessageBody");
					this.OnMessageBodyChanged();
				}
			}
		}
		
		[Column(Storage="_MessageDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime MessageDateTime
		{
			get
			{
				return this._MessageDateTime;
			}
			set
			{
				if ((this._MessageDateTime != value))
				{
					this.OnMessageDateTimeChanging(value);
					this.SendPropertyChanging();
					this._MessageDateTime = value;
					this.SendPropertyChanged("MessageDateTime");
					this.OnMessageDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_MessageTypeId", DbType="Int NOT NULL")]
		public int MessageTypeId
		{
			get
			{
				return this._MessageTypeId;
			}
			set
			{
				if ((this._MessageTypeId != value))
				{
					if (this._MessageType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MessageTypeId = value;
					this.SendPropertyChanged("MessageTypeId");
					this.OnMessageTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_MessageLatitude", DbType="Float")]
		public System.Nullable<double> MessageLatitude
		{
			get
			{
				return this._MessageLatitude;
			}
			set
			{
				if ((this._MessageLatitude != value))
				{
					this.OnMessageLatitudeChanging(value);
					this.SendPropertyChanging();
					this._MessageLatitude = value;
					this.SendPropertyChanged("MessageLatitude");
					this.OnMessageLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_MessageLongitude", DbType="Float")]
		public System.Nullable<double> MessageLongitude
		{
			get
			{
				return this._MessageLongitude;
			}
			set
			{
				if ((this._MessageLongitude != value))
				{
					this.OnMessageLongitudeChanging(value);
					this.SendPropertyChanging();
					this._MessageLongitude = value;
					this.SendPropertyChanged("MessageLongitude");
					this.OnMessageLongitudeChanged();
				}
			}
		}
		
		[Column(Storage="_MessageDisplay", DbType="Bit")]
		public System.Nullable<bool> MessageDisplay
		{
			get
			{
				return this._MessageDisplay;
			}
			set
			{
				if ((this._MessageDisplay != value))
				{
					this.OnMessageDisplayChanging(value);
					this.SendPropertyChanging();
					this._MessageDisplay = value;
					this.SendPropertyChanged("MessageDisplay");
					this.OnMessageDisplayChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorId", DbType="Int NOT NULL")]
		public int AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[Column(Storage="_FeedId", DbType="Int NOT NULL")]
		public int FeedId
		{
			get
			{
				return this._FeedId;
			}
			set
			{
				if ((this._FeedId != value))
				{
					if (this._Feed.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedIdChanging(value);
					this.SendPropertyChanging();
					this._FeedId = value;
					this.SendPropertyChanged("FeedId");
					this.OnFeedIdChanged();
				}
			}
		}
		
		[Association(Name="Message_Message", Storage="_Message2", ThisKey="MessageId", OtherKey="MessageId", IsUnique=true, IsForeignKey=false)]
		public Message Message2
		{
			get
			{
				return this._Message2.Entity;
			}
			set
			{
				Message previousValue = this._Message2.Entity;
				if (((previousValue != value) 
							|| (this._Message2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message2.Entity = null;
						previousValue.Message1 = null;
					}
					this._Message2.Entity = value;
					if ((value != null))
					{
						value.Message1 = this;
					}
					this.SendPropertyChanged("Message2");
				}
			}
		}
		
		[Association(Name="Author_Message", Storage="_Author", ThisKey="AuthorId", OtherKey="AuthorId", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._AuthorId = value.AuthorId;
					}
					else
					{
						this._AuthorId = default(int);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[Association(Name="Feed_Message", Storage="_Feed", ThisKey="FeedId", OtherKey="FeedId", IsForeignKey=true)]
		public Feed Feed
		{
			get
			{
				return this._Feed.Entity;
			}
			set
			{
				Feed previousValue = this._Feed.Entity;
				if (((previousValue != value) 
							|| (this._Feed.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Feed.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Feed.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._FeedId = value.FeedId;
					}
					else
					{
						this._FeedId = default(int);
					}
					this.SendPropertyChanged("Feed");
				}
			}
		}
		
		[Association(Name="Message_Message", Storage="_Message1", ThisKey="MessageId", OtherKey="MessageId", IsForeignKey=true)]
		public Message Message1
		{
			get
			{
				return this._Message1.Entity;
			}
			set
			{
				Message previousValue = this._Message1.Entity;
				if (((previousValue != value) 
							|| (this._Message1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message1.Entity = null;
						previousValue.Message2 = null;
					}
					this._Message1.Entity = value;
					if ((value != null))
					{
						value.Message2 = this;
						this._MessageId = value.MessageId;
					}
					else
					{
						this._MessageId = default(int);
					}
					this.SendPropertyChanged("Message1");
				}
			}
		}
		
		[Association(Name="MessageType_Message", Storage="_MessageType", ThisKey="MessageTypeId", OtherKey="MessageTypeId", IsForeignKey=true)]
		public MessageType MessageType
		{
			get
			{
				return this._MessageType.Entity;
			}
			set
			{
				MessageType previousValue = this._MessageType.Entity;
				if (((previousValue != value) 
							|| (this._MessageType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageType.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._MessageType.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._MessageTypeId = value.MessageTypeId;
					}
					else
					{
						this._MessageTypeId = default(int);
					}
					this.SendPropertyChanged("MessageType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MessageTypes")]
	public partial class MessageType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageTypeId;
		
		private string _MessageTypeName;
		
		private EntitySet<Message> _Messages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageTypeIdChanging(int value);
    partial void OnMessageTypeIdChanged();
    partial void OnMessageTypeNameChanging(string value);
    partial void OnMessageTypeNameChanged();
    #endregion
		
		public MessageType()
		{
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			OnCreated();
		}
		
		[Column(Storage="_MessageTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageTypeId
		{
			get
			{
				return this._MessageTypeId;
			}
			set
			{
				if ((this._MessageTypeId != value))
				{
					this.OnMessageTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MessageTypeId = value;
					this.SendPropertyChanged("MessageTypeId");
					this.OnMessageTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_MessageTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MessageTypeName
		{
			get
			{
				return this._MessageTypeName;
			}
			set
			{
				if ((this._MessageTypeName != value))
				{
					this.OnMessageTypeNameChanging(value);
					this.SendPropertyChanging();
					this._MessageTypeName = value;
					this.SendPropertyChanged("MessageTypeName");
					this.OnMessageTypeNameChanged();
				}
			}
		}
		
		[Association(Name="MessageType_Message", Storage="_Messages", ThisKey="MessageTypeId", OtherKey="MessageTypeId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.MessageType = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.MessageType = null;
		}
	}
	
	public partial class NearestMessagesResult
	{
		
		private int _MessageId;
		
		public NearestMessagesResult()
		{
		}
		
		[Column(Storage="_MessageId", DbType="Int NOT NULL")]
		public int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					this._MessageId = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
